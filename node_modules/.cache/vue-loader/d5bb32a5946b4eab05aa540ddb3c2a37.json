{"remainingRequest":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/src/components/Intro.vue?vue&type=template&id=5a084c16&scoped=true","dependencies":[{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/src/components/Intro.vue","mtime":1647812360260},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2IGlkPSJhcHBDYW52YXMiPgogICAgICA8ZGl2IGlkPSJ0aXRsZSI+CiAgICAgICAgPGgxPgogICAgICAgICAgTW91c3NhIFN5CiAgICAgICAgPC9oMT4KICAgICAgICA8cD5mcm9udC1lbmQgZGV2ZWxvcGVyPC9wPgogICAgICAgIDxwPmZvciB0aGUgbG92ZSBvZiBhbmltYXRpb25zPC9wPgoKICAgICAgICA8cm91dGVyLWxpbmsgdG89Ii9wb3J0Zm9saW8vaG9tZSI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9Im15QnV0dG9uIj5XZWxjb21lPC9idXR0b24+CiAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4K"},{"version":3,"sources":["/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/src/components/Intro.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;UACD,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACV,CAAC,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACf,CAAC,CAAC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/src/components/Intro.vue","sourceRoot":"","sourcesContent":["<template>\n    <div id=\"appCanvas\">\n      <div id=\"title\">\n        <h1>\n          Moussa Sy\n        </h1>\n        <p>front-end developer</p>\n        <p>for the love of animations</p>\n\n        <router-link to=\"/portfolio/home\">\n            <button class=\"myButton\">Welcome</button>\n        </router-link>\n      </div>\n    </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport * as dat from 'dat.gui';\nimport gsap from 'gsap'\nconst OrbitControls = require('three-orbitcontrols')\nconst gui = new dat.GUI();\n\nexport default {\n    data() {\n        return {\n            canvas: true\n        }\n    },\n    methods: {\n        createCanvas() {\n                        // GUI\n            const world = {\n                plane: {\n                    width: 400,\n                    height: 400,\n                    widthSegments: 50,\n                    heightSegments: 50,\n                }\n            }\n\n            gui.add(world.plane, 'width', 1, 500).onChange(generatePlane)\n            gui.add(world.plane, 'height', 1, 500).onChange(generatePlane)\n            gui.add(world.plane, 'widthSegments', 1, 100).onChange(generatePlane)\n            gui.add(world.plane, 'heightSegments', 1, 100).onChange(generatePlane)\n\n            function generatePlane() {\n                planeMesh.geometry.dispose()\n                planeMesh.geometry = new THREE.PlaneGeometry(\n                    world.plane.width,\n                    world.plane.height,\n                    world.plane.widthSegments,\n                    world.plane.heightSegments\n                )\n\n                //      VERTICE POSITION RANDOMIZATION\n\n\n                const { array } = planeMesh.geometry.attributes.position\n                const randomValues = []\n                for (let i = 0; i < array.length; i++) {\n\n                    if (i % 3 === 0 ){\n                        const x = array[i]\n                        const y = array[i + 1]\n                        const z = array[i + 2]\n\n                        array[i] = x + (Math.random() - 0.5) * 3\n                        array[i + 1] = y + (Math.random() - 0.5) * 3\n                        array[i + 2] = z + (Math.random() - 0.5) * 7\n                    }\n\n                    randomValues.push(Math.random()  * Math.PI * 2)\n                }\n\n                planeMesh.geometry.attributes.position.randomValues = randomValues //add new property (randomValues)\n                planeMesh.geometry.attributes.position.originalPosition = planeMesh.geometry.attributes.position.array //add new property (originalPosition)\n\n                const colors = []\n                for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\n                    colors.push(0, 0.10, 0.5)\n                }\n\n            planeMesh.geometry.setAttribute('color', new THREE.BufferAttribute(\n                new Float32Array(colors), 3)\n            )\n            }\n\n\n            //    $$$$$$$$$$$$$$$  CAMERA  $$$$$$$$$$$$$$$$$$$$$$ \n\n\n            const raycaster = new THREE.Raycaster() //kind of a laser pointer\n            const camera = new THREE.PerspectiveCamera(\n                    75, \n                    window.innerWidth / window.innerHeight,\n                    0.01,\n                    1000)\n            const scene = new THREE.Scene();\n            const renderer = new THREE.WebGL1Renderer( { antialias: true } ) //canvas\n\n            renderer.setSize(innerWidth, innerHeight) //size of the Canvas\n            renderer.setPixelRatio(devicePixelRatio)\n\n            const app = document.getElementById('appCanvas')\n            app.appendChild(renderer.domElement) // add the canvas to the dom\n\n            new OrbitControls(camera, renderer.domElement)\n            camera.position.z = 50\n\n\n\n            //    $$$$$$$$   PLANE   $$$$$$$$$$$$$$$$$$\n\n            const planeGeometry = new THREE.\n                PlaneGeometry(\n                    world.plane.width, \n                    world.plane.height,\n                    world.plane.widthSegments,\n                    world.plane.heightSegments\n                    )\n\n            const PlaneMaterial = new THREE.MeshPhongMaterial({\n                side: THREE.DoubleSide,\n                flatShading: THREE.FlatShading,\n                vertexColors: true\n            })\n            const planeMesh = new THREE.Mesh(planeGeometry, PlaneMaterial)\n\n            scene.add(planeMesh)\n            generatePlane()\n\n\n\n            // $$$$$$$$$$$$$$$$$$$$$ LIGHTS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n\n            const light = new THREE.DirectionalLight(\n                0xffffff, 1\n            )\n            light.position.set(0, -1, 1)\n            scene.add(light)\n\n            const backLight = new THREE.DirectionalLight(\n                0xffffff, 1\n            )\n            backLight.position.set(0, 0, -1)\n            scene.add(backLight)\n\n            const mouse = {\n                x: undefined,\n                y : undefined\n            }\n\n\n            //                  $$$$$$  ANIMATE  $$$$$$\n\n            let frame = 0\n            function animate() {\n                requestAnimationFrame(animate)\n                frame += 0.01\n                renderer.render(scene, camera)\n                raycaster.setFromCamera(mouse, camera)\n                \n                const { array, originalPosition, randomValues } = planeMesh.geometry.attributes.position\n\n                for (let i = 0; i < array.length; i += 3) {\n\n                    //x\n                    array[i] = originalPosition[i] + Math.cos(frame + randomValues[i]) * 0.01\n                    //y\n                    array[i + 1] = originalPosition[i + 1] + Math.cos(frame + randomValues[i + 1]) * 0.01\n                    //z\n                }\n\n                planeMesh.geometry.attributes.position.needsUpdate = true\n\n                const intersects = raycaster.intersectObject(planeMesh)\n\n                if (intersects.length > 0) {\n\n                        const { color } = intersects[0].object.geometry.attributes\n                        \n                        //vertice 1\n                        color.setX(intersects[0].face.a, 0.1)  //vertices to change colors\n                        color.setY(intersects[0].face.a, 0.5)\n                        color.setZ(intersects[0].face.a, 1)\n\n                        //vertice 2\n                        color.setX(intersects[0].face.b, 0.1)  //vertices to change colors\n                        color.setY(intersects[0].face.b, 0.5)\n                        color.setZ(intersects[0].face.a, 1)\n\n                        //vertice 3\n                        color.setX(intersects[0].face.c, 0.1)  //vertices to change colors\n                        color.setY(intersects[0].face.c, 0.5)\n                        color.setZ(intersects[0].face.a, 1)\n\n                        \n\n                    intersects[0].object.geometry.attributes.color.needsUpdate = true\n\n                    const initialColor = {\n                        r: 0,\n                        g: 0.10,\n                        b: 0.5\n                    }\n                    const hoverColor = {\n                        r: 0.1,\n                        g: 0.5,\n                        b: 1\n                    }\n                    gsap.to(hoverColor, {\n                        r: initialColor.r,\n                        g: initialColor.g,\n                        b: initialColor.b,\n                        onUpdate: () => {\n                            color.setX(intersects[0].face.a, hoverColor.r)  //vertices to change colors\n                            color.setY(intersects[0].face.a, hoverColor.g)\n                            color.setZ(intersects[0].face.a, hoverColor.b)\n                    \n                            //vertice 2\n                            color.setX(intersects[0].face.b, hoverColor.r)  //vertices to change colors\n                            color.setY(intersects[0].face.b, hoverColor.g)\n                            color.setZ(intersects[0].face.a, hoverColor.b)\n                    \n                            //vertice 3\n                            color.setX(intersects[0].face.c, hoverColor.r)  //vertices to change colors\n                            color.setY(intersects[0].face.c, hoverColor.g)\n                            color.setZ(intersects[0].face.a, hoverColor.b)\n                            color.needsUpdate = true\n                        }\n                    })\n                }\n            \n\n            }\n\n            //renderer.render(scene, camera)\n                animate()\n            \n\n\n            // MOUSE moving the canvas\n\n            addEventListener('mousemove', (event) => {\n                mouse.x = (event.clientX / innerWidth) * 2 - 1  //  1 to the right    -1 to the left\n                mouse.y = -(event.clientY / innerHeight) * 2 + 1\n            \n            })\n\n        }\n    },\n    mounted() {\n        if (this.$router.currentRoute._rawValue.fullPath === '/portfolio/') {\n            return this.createCanvas()\n        }\n    }\n}\n</script>\n\n<style scoped>\nhtml, body {\n  padding: 0;\n  margin: 0;\n}\n#appCanvas {\n  font-family: Georgia, 'Times New Roman', Times, serif, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin: 0;\n}\n#title {\n  color: white;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 45vw;\n  transform: translate(-50%, -50%);\n  font-size: 2rem;\n}\n.myButton {\n\tbox-shadow: 3px 4px 0px 0px #899599;\n\tbackground:linear-gradient(to bottom, #ededed 5%, #bab1ba 100%);\n\tbackground-color:#ededed;\n\tborder-radius:15px;\n\tborder:1px solid #d6bcd6;\n\tdisplay:inline-block;\n\tcursor:pointer;\n\tcolor:#3a8a9e;\n\tfont-family:Arial;\n\tfont-size:17px;\n\tpadding:7px 25px;\n\ttext-decoration:none;\n\ttext-shadow:0px 1px 0px #e1e2ed;\n}\n.myButton:hover {\n\tbackground:linear-gradient(to bottom, #bab1ba 5%, #ededed 100%);\n\tbackground-color:#bab1ba;\n}\n.myButton:active {\n\tposition:relative;\n\ttop:1px;\n}\n\n\n</style>"]}]}