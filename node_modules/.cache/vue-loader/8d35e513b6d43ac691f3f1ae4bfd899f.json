{"remainingRequest":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/src/components/Intro.vue?vue&type=style&index=0&id=22b83c6c&scoped=true&lang=css","dependencies":[{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/src/components/Intro.vue","mtime":1647808597572},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiNhcHAgewogIGZvbnQtZmFtaWx5OiBHZW9yZ2lhLCAnVGltZXMgTmV3IFJvbWFuJywgVGltZXMsIHNlcmlmLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGNvbG9yOiAjMmMzZTUwOwp9CmJvZHkgewogIG1hcmdpbjogMDsKfQojdGl0bGUgewogIGNvbG9yOiB3aGl0ZTsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgbGVmdDogNTAlOwogIHdpZHRoOiA0NXZ3OwogIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOwogIGZvbnQtc2l6ZTogMnJlbTsKfQoubXlCdXR0b24gewoJYm94LXNoYWRvdzogM3B4IDRweCAwcHggMHB4ICM4OTk1OTk7CgliYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICNlZGVkZWQgNSUsICNiYWIxYmEgMTAwJSk7CgliYWNrZ3JvdW5kLWNvbG9yOiNlZGVkZWQ7Cglib3JkZXItcmFkaXVzOjE1cHg7Cglib3JkZXI6MXB4IHNvbGlkICNkNmJjZDY7CglkaXNwbGF5OmlubGluZS1ibG9jazsKCWN1cnNvcjpwb2ludGVyOwoJY29sb3I6IzNhOGE5ZTsKCWZvbnQtZmFtaWx5OkFyaWFsOwoJZm9udC1zaXplOjE3cHg7CglwYWRkaW5nOjdweCAyNXB4OwoJdGV4dC1kZWNvcmF0aW9uOm5vbmU7Cgl0ZXh0LXNoYWRvdzowcHggMXB4IDBweCAjZTFlMmVkOwp9Ci5teUJ1dHRvbjpob3ZlciB7CgliYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICNiYWIxYmEgNSUsICNlZGVkZWQgMTAwJSk7CgliYWNrZ3JvdW5kLWNvbG9yOiNiYWIxYmE7Cn0KLm15QnV0dG9uOmFjdGl2ZSB7Cglwb3NpdGlvbjpyZWxhdGl2ZTsKCXRvcDoxcHg7Cn0KCgo="},{"version":3,"sources":["/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/src/components/Intro.vue"],"names":[],"mappings":";AAyPA,CAAC,CAAC,CAAC,EAAE;EACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB;AACA,CAAC,CAAC,CAAC,EAAE;EACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACX;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACR,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACjB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;CACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;CAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;CAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;CACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;CAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;CAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;CACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR","file":"/Users/muzen/Desktop/Code/Portfolio/CV web/portfolio-pro/src/components/Intro.vue","sourceRoot":"","sourcesContent":["<template>\n    <div id=\"app\">\n      <div id=\"title\">\n        <h1>\n          Moussa Sy\n        </h1>\n        <p>front-end developer</p>\n        <p>for the love of animations</p>\n\n        <button class=\"myButton\">Welcome</button>\n      </div>\n    </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport * as dat from 'dat.gui';\nimport gsap from 'gsap'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nconst gui = new dat.GUI();\n\n// GUI\nconsole.log('orbit');\nconsole.log(OrbitControls);\nconst world = {\n    plane: {\n        width: 400,\n        height: 400,\n        widthSegments: 50,\n        heightSegments: 50,\n    }\n}\n\ngui.add(world.plane, 'width', 1, 500).onChange(generatePlane)\ngui.add(world.plane, 'height', 1, 500).onChange(generatePlane)\ngui.add(world.plane, 'widthSegments', 1, 100).onChange(generatePlane)\ngui.add(world.plane, 'heightSegments', 1, 100).onChange(generatePlane)\n\nfunction generatePlane() {\n    planeMesh.geometry.dispose()\n    planeMesh.geometry = new THREE.PlaneGeometry(\n        world.plane.width,\n        world.plane.height,\n        world.plane.widthSegments,\n        world.plane.heightSegments\n      )\n\n    //      VERTICE POSITION RANDOMIZATION\n\n\n    const { array } = planeMesh.geometry.attributes.position\n    const randomValues = []\n    for (let i = 0; i < array.length; i++) {\n\n        if (i % 3 === 0 ){\n            const x = array[i]\n            const y = array[i + 1]\n            const z = array[i + 2]\n\n            array[i] = x + (Math.random() - 0.5) * 3\n            array[i + 1] = y + (Math.random() - 0.5) * 3\n            array[i + 2] = z + (Math.random() - 0.5) * 7\n        }\n\n        randomValues.push(Math.random()  * Math.PI * 2)\n    }\n\n    planeMesh.geometry.attributes.position.randomValues = randomValues //add new property (randomValues)\n    planeMesh.geometry.attributes.position.originalPosition = planeMesh.geometry.attributes.position.array //add new property (originalPosition)\n\n    const colors = []\n    for (let i = 0; i < planeMesh.geometry.attributes.position.count; i++) {\n        colors.push(0, 0.10, 0.5)\n    }\n\nplaneMesh.geometry.setAttribute('color', new THREE.BufferAttribute(\n    new Float32Array(colors), 3)\n)\n}\n\n\n//    $$$$$$$$$$$$$$$  CAMERA  $$$$$$$$$$$$$$$$$$$$$$ \n\n\nconst raycaster = new THREE.Raycaster() //kind of a laser pointer\nconst camera = new THREE.PerspectiveCamera(\n        75, \n        window.innerWidth / window.innerHeight,\n        0.01,\n        1000)\nconst scene = new THREE.Scene();\nconst renderer = new THREE.WebGL1Renderer( { antialias: true } ) //canvas\n\nrenderer.setSize(innerWidth, innerHeight) //size of the Canvas\nrenderer.setPixelRatio(devicePixelRatio)\n\ndocument.body.appendChild(renderer.domElement) // add the canvas to the dom\n\nnew OrbitControls(camera, renderer.domElement)\ncamera.position.z = 50\n\n\n\n//    $$$$$$$$   PLANE   $$$$$$$$$$$$$$$$$$\n\nconst planeGeometry = new THREE.\n    PlaneGeometry(\n        world.plane.width, \n        world.plane.height,\n        world.plane.widthSegments,\n        world.plane.heightSegments\n        )\n\nconst PlaneMaterial = new THREE.MeshPhongMaterial({\n    side: THREE.DoubleSide,\n    flatShading: THREE.FlatShading,\n    vertexColors: true\n})\nconst planeMesh = new THREE.Mesh(planeGeometry, PlaneMaterial)\n\nscene.add(planeMesh)\ngeneratePlane()\n\n\n\n// $$$$$$$$$$$$$$$$$$$$$ LIGHTS $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n\nconst light = new THREE.DirectionalLight(\n    0xffffff, 1\n)\nlight.position.set(0, -1, 1)\nscene.add(light)\n\nconst backLight = new THREE.DirectionalLight(\n    0xffffff, 1\n)\nbackLight.position.set(0, 0, -1)\nscene.add(backLight)\n\nconst mouse = {\n    x: undefined,\n    y : undefined\n}\n\n\n//                  $$$$$$  ANIMATE  $$$$$$\n\nlet frame = 0\nfunction animate() {\n    requestAnimationFrame(animate)\n    frame += 0.01\n    renderer.render(scene, camera)\n    raycaster.setFromCamera(mouse, camera)\n    \n    const { array, originalPosition, randomValues } = planeMesh.geometry.attributes.position\n\n    for (let i = 0; i < array.length; i += 3) {\n\n        //x\n        array[i] = originalPosition[i] + Math.cos(frame + randomValues[i]) * 0.01\n        //y\n        array[i + 1] = originalPosition[i + 1] + Math.cos(frame + randomValues[i + 1]) * 0.01\n        //z\n    }\n\n    planeMesh.geometry.attributes.position.needsUpdate = true\n\n    const intersects = raycaster.intersectObject(planeMesh)\n\n    if (intersects.length > 0) {\n\n            const { color } = intersects[0].object.geometry.attributes\n            \n            //vertice 1\n            color.setX(intersects[0].face.a, 0.1)  //vertices to change colors\n            color.setY(intersects[0].face.a, 0.5)\n            color.setZ(intersects[0].face.a, 1)\n\n            //vertice 2\n            color.setX(intersects[0].face.b, 0.1)  //vertices to change colors\n            color.setY(intersects[0].face.b, 0.5)\n            color.setZ(intersects[0].face.a, 1)\n\n            //vertice 3\n            color.setX(intersects[0].face.c, 0.1)  //vertices to change colors\n            color.setY(intersects[0].face.c, 0.5)\n            color.setZ(intersects[0].face.a, 1)\n\n            \n\n        intersects[0].object.geometry.attributes.color.needsUpdate = true\n\n        const initialColor = {\n            r: 0,\n            g: 0.10,\n            b: 0.5\n        }\n        const hoverColor = {\n            r: 0.1,\n            g: 0.5,\n            b: 1\n        }\n        gsap.to(hoverColor, {\n            r: initialColor.r,\n            g: initialColor.g,\n            b: initialColor.b,\n            onUpdate: () => {\n                color.setX(intersects[0].face.a, hoverColor.r)  //vertices to change colors\n                color.setY(intersects[0].face.a, hoverColor.g)\n                color.setZ(intersects[0].face.a, hoverColor.b)\n        \n                //vertice 2\n                color.setX(intersects[0].face.b, hoverColor.r)  //vertices to change colors\n                color.setY(intersects[0].face.b, hoverColor.g)\n                color.setZ(intersects[0].face.a, hoverColor.b)\n        \n                //vertice 3\n                color.setX(intersects[0].face.c, hoverColor.r)  //vertices to change colors\n                color.setY(intersects[0].face.c, hoverColor.g)\n                color.setZ(intersects[0].face.a, hoverColor.b)\n                color.needsUpdate = true\n            }\n        })\n    }\n   \n\n}\n\n//renderer.render(scene, camera)\n\n\nanimate()\n\n\n// MOUSE\n\naddEventListener('mousemove', (event) => {\n    mouse.x = (event.clientX / innerWidth) * 2 - 1  //  1 to the right    -1 to the left\n    mouse.y = -(event.clientY / innerHeight) * 2 + 1\n \n})\n\nexport default {\n    \n}\n</script>\n\n<style scoped>\n#app {\n  font-family: Georgia, 'Times New Roman', Times, serif, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\nbody {\n  margin: 0;\n}\n#title {\n  color: white;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 45vw;\n  transform: translate(-50%, -50%);\n  font-size: 2rem;\n}\n.myButton {\n\tbox-shadow: 3px 4px 0px 0px #899599;\n\tbackground:linear-gradient(to bottom, #ededed 5%, #bab1ba 100%);\n\tbackground-color:#ededed;\n\tborder-radius:15px;\n\tborder:1px solid #d6bcd6;\n\tdisplay:inline-block;\n\tcursor:pointer;\n\tcolor:#3a8a9e;\n\tfont-family:Arial;\n\tfont-size:17px;\n\tpadding:7px 25px;\n\ttext-decoration:none;\n\ttext-shadow:0px 1px 0px #e1e2ed;\n}\n.myButton:hover {\n\tbackground:linear-gradient(to bottom, #bab1ba 5%, #ededed 100%);\n\tbackground-color:#bab1ba;\n}\n.myButton:active {\n\tposition:relative;\n\ttop:1px;\n}\n\n\n</style>"]}]}